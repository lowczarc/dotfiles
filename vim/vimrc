call plug#begin('~/.vim/plugged')

Plug 'rust-lang/rust.vim'

Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/plenary.nvim'

Plug 'jose-elias-alvarez/null-ls.nvim'
Plug 'MunifTanjim/prettier.nvim'
Plug 'ziglang/zig.vim'
Plug 'ray-x/go.nvim'

Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}

" Plug 'neoclide/coc-prettier', {'do': 'yarn install --frozen-lockfile'}
" Plug 'neoclide/coc-eslint', {'do': 'yarn install --frozen-lockfile'}
" Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}

Plug 'sheerun/vim-polyglot'

Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'HerringtonDarkholme/yats.vim'

Plug 'fatih/molokai'

Plug 'mgechev/revive'

Plug 'dense-analysis/ale'

" Plug 'github/copilot.vim'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

call plug#end()


colorscheme molokai
set termguicolors

syntax on
set nu
set relativenumber

let g:ale_enabled = 0

" Alias commands
command W w
command Q q
command WQ wq
command Wq wq
command E e

" Rust.vim config
let g:rustfmt_fail_silently = 0
let g:rustfmt_autosave = 1

set signcolumn=yes

" Use language dependent configurations
let b:did_ftplugin = 1

set colorcolumn=80

augroup vimrc_todo
    au!
    au Syntax * syn match WarningMessage /\v<(WARNING|DEBUG)/
          \ containedin=.*Comment,vimCommentTitle
augroup END
hi def link WarningMessage Todo

" Remove arrow mapping
map <Left> <nop>
map <Right> <nop>
map <Up> <nop>
map <Down> <nop>

" Move between windows with Tab instead of Ctrl-w
map <Tab> <C-w>

nnoremap ; :normal! @a<CR>

" vim -b : edit binary using xxd-format!
augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif

  au BufReadPre  *.rom let &bin=1
  au BufReadPost *.rom if &bin | %!xxd
  au BufReadPost *.rom set ft=xxd | endif
  au BufWritePre *.rom if &bin | %!xxd -r
  au BufWritePre *.rom endif
  au BufWritePost *.rom if &bin | %!xxd
  au BufWritePost *.rom set nomod | endif

augroup END
au BufReadPost *.nu set syntax=nu
