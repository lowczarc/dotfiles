call plug#begin('~/.vim/plugged')

Plug 'rust-lang/rust.vim'

Plug 'nvim-treesitter/nvim-treesitter'
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/plenary.nvim'

Plug 'jose-elias-alvarez/null-ls.nvim'
Plug 'MunifTanjim/prettier.nvim'
Plug 'ray-x/go.nvim'

Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}

" Plug 'neoclide/coc-prettier', {'do': 'yarn install --frozen-lockfile'}
" Plug 'neoclide/coc-eslint', {'do': 'yarn install --frozen-lockfile'}
" Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}

Plug 'sheerun/vim-polyglot'

Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'HerringtonDarkholme/yats.vim'

Plug 'fatih/molokai'

Plug 'jsit/toast.vim'

Plug 'mgechev/revive'

Plug 'dense-analysis/ale'

Plug 'github/copilot.vim'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

Plug 'LhKipp/nvim-nu', {'do': ':TSInstall nu'}

call plug#end()

lua << EOF
local null_ls = require("null-ls")

local group = vim.api.nvim_create_augroup("lsp_format_on_save", { clear = false })
local event = "BufWritePre" -- or "BufWritePost"
local async = event == "BufWritePost"

null_ls.setup({
  on_attach = function(client, bufnr)
    if client.supports_method("textDocument/formatting") then
      vim.keymap.set("n", "<Leader>f", function()
        vim.lsp.buf.format({ bufnr = vim.api.nvim_get_current_buf() })
      end, { buffer = bufnr, desc = "[lsp] format" })

      -- format on save
      vim.api.nvim_clear_autocmds({ buffer = bufnr, group = group })
      vim.api.nvim_create_autocmd(event, {
        buffer = bufnr,
        group = group,
        callback = function()
          vim.lsp.buf.format({ bufnr = bufnr, async = async })
        end,
        desc = "[lsp] format on save",
      })
    end

    if client.supports_method("textDocument/rangeFormatting") then
      vim.keymap.set("x", "<Leader>f", function()
        vim.lsp.buf.format({ bufnr = vim.api.nvim_get_current_buf() })
      end, { buffer = bufnr, desc = "[lsp] format" })
    end
  end,
})

local prettier = require("prettier")
EOF

colorscheme molokai
colorscheme toast
"set background=light
set termguicolors

syntax on
set nu
set relativenumber

let g:ale_enabled = 0

" Alias commands
command W w
command Q q
command WQ wq
command Wq wq
command E e

" Rust.vim config
let g:rustfmt_fail_silently = 0
let g:rustfmt_autosave = 1

set signcolumn=yes

" Use language dependent configurations
let b:did_ftplugin = 1

set colorcolumn=80

augroup vimrc_todo
    au!
    au Syntax * syn match WarningMessage /\v<(WARNING|DEBUG)/
          \ containedin=.*Comment,vimCommentTitle
augroup END
hi def link WarningMessage Todo

" Remove arrow mapping
map <Left> <nop>
map <Right> <nop>
map <Up> <nop>
map <Down> <nop>

" Move between windows with Tab instead of Ctrl-w
map <Tab> <C-w>

" vim -b : edit binary using xxd-format!
augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif

  au BufReadPre  *.rom let &bin=1
  au BufReadPost *.rom if &bin | %!xxd
  au BufReadPost *.rom set ft=xxd | endif
  au BufWritePre *.rom if &bin | %!xxd -r
  au BufWritePre *.rom endif
  au BufWritePost *.rom if &bin | %!xxd
  au BufWritePost *.rom set nomod | endif

augroup END
au BufReadPost *.nu set syntax=nu
